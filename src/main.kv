# Copyright (C) 2017 Carlos PÃ©rez Ramil <c.pramil at udc.es>

# This file is part of ASP-Graph.

# ASP-Graph is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# ASP-Graph is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with ASP-Graph.  If not, see <http://www.gnu.org/licenses/>.

#:kivy 1.9.1
#:import textinput kivy.uix
#:import window kivy.core.window

################################################################################

# asp_graph module definitions

################################################################################

<GenericWidget>:
    color: .941, .941, .941

<SquareWidget>:

    size: 5, 5
    #a: self.show_area('b')

    canvas:
        Color:
            rgb: self.color
        Rectangle:
            pos: self.pos
            size: self.size
        Color:
            rgb: 0, 0, 0
        Line:
            width: 1.1
            rectangle: self.x, self.y, self.size[0], self.size[1]


<EllipseWidget>:

    # default_size_x: 420
    # default_size_y: 300
    # inc_x: 120
    # inc_y: 100
    #a: self.show_area('r')

    size: 4, 4
    dx: self.size[0]
    dy: self.size[1]
    center: self.x + self.size[0]/2.0, self.y + self.size[1]/2.0

    # a1: self.x, self.y + self.dy/2
    # a2: self.x + self.dx, self.y + self.dy/2
    # b1: self.x + self.dx/2, self.y
    # b2: self.x + self.dx/2, self.y + self.dy

    canvas:
        Color:
            rgb: self.color
        Ellipse:
            pos: self.pos
            size: self.size
        Color:
            rgb: 0, 0, 0
        #Line:
        SmoothLine:
            width: 1.4 #2
            ellipse: self.x, self.y, self.dx, self.dy

<HookWidget>:
    size: 12, 12
    canvas:
        Color:
            rgba: (0.3, 0.3, 0.3, 0.6) if self.shape == 0 else (0, 0, 0, 0)
        Ellipse:
            pos: self.pos
            size: self.size
        Color:
            rgba: (0.3, 0.3, 0.3, 0.6) if self.shape == 1 else (0, 0, 0, 0)
        Rectangle:
            pos: self.pos
            size: self.size
        Color:
            rgba: 0.3, 0.3, 0.3, 1

<AtomWidget>:

    # This widget is a bit tricky:
    # Height is set by AtomWidget: 20 by default, subject to scale changes.
    # Width is computed by CustomLabel as a function of font_size and text,
    # both being determined by AtomWidget height and text, respectively.

    text: '__atom__'
    line_info: []
    width: customlabel.width
    height: 20
    CustomLabel:
        id: customlabel
        pos: self.parent.pos
        width: self.texture_size[0]
        height: self.parent.height
        font_size: self.height
#        font_name: '../fonts/texgyreschola-italic.otf'
        text: self.parent.text
        color: 0, 0, 0, 1
        padding: 0, 0
    HookWidget:
        id: hook_bottom
        pos: self.parent.center_x-6, self.parent.y-14
    HookWidget:
        id: hook_top
        pos: self.parent.center_x-6, self.parent.top + 2
    HookWidget:
        id: hook_right
        pos: self.parent.right+4, self.parent.center_y-6
    HookWidget:
        id: hook_left
        pos: self.parent.x-16, self.parent.center_y-6

# <TextWidget>:

#     background_normal: './textinput.png'
#     background_color: .941, .941, .941, 1
#     size: 60, 34
#     multiline: False
#     write_tab: False
#     font_name: '../fonts/texgyreschola-italic.otf'
#     font_size: min(self.size[1]/1.5, 500)


<RootWidget>:

    color: .941, .941, .941
    size: self.parent.size if (self.parent) else (1, 1)
    #size_hint: 1, 1
    canvas.before:
        Color:
            rgb: self.color
        Rectangle:
            pos: self.pos
            size: self.size


################################################################################

# gui module definitions

################################################################################

<TextInputDialog>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        padding: 20, 10, 20, 10
        spacing: 10

        RelativeLayout:
            TextInput:
                id: textinput
                hint_text: ''
                size_hint_y: None
                pos_hint: {'center_y': .5}
                height: 30
                multiline: False

        RelativeLayout:
            Button:
                text: "Cancel"
                size_hint: None, None
                pos_hint: {'x': 0}
                size: self.texture_size[0] + 30, 30
                on_release: root.cancel()
            Button:
                text: "Ok"
                size_hint: None, None
                pos_hint: {'right': 1}
                size: self.texture_size[0] + 30, 30
                on_release:
                    root.validate_callback(textinput.text)
                    if root.dismiss_on_validate: root.cancel()

<LoadDialog>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        FileChooserListView:
            path: './'
            id: filechooser

        BoxLayout:
            size_hint_y: None
            height: 30
            Button:
                text: "Cancel"
                on_release: root.cancel()

            Button:
                text: "Load"
                on_release: root.load(filechooser.path, filechooser.selection)

<SaveDialog>:
    text_input: text_input
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        FileChooserListView:
            path: './'
            id: filechooser
            on_selection: text_input.text = self.selection and self.selection[0] or ''

        TextInput:
            id: text_input
            size_hint_y: None
            height: 30
            multiline: False

        BoxLayout:
            size_hint_y: None
            height: 30
            Button:
                text: "Cancel"
                on_release: root.cancel()

            Button:
                text: "Save"
                on_release: root.save(filechooser.path, text_input.text)

<ExportDialog>:
    text_input: text_input
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        FileChooserListView:
            path: './'
            id: filechooser
            on_selection: text_input.text = self.selection and self.selection[0] or ''

        BoxLayout:
            size_hint_y: None
            height: 30
            Label:
                text: 'Supported file extensions: .png, .lp'
                halign: 'left'
            TextInput:
                id: text_input
                size_hint_y: None
                height: 30
                multiline: False

        BoxLayout:
            size_hint_y: None
            height: 30
            Button:
                text: "Cancel"
                on_release: root.cancel()

            Button:
                text: "Export"
                on_release: root.export(filechooser.path, text_input.text)

<StableModelDialog>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        padding: 10, 10, 10, 10

        BoxLayout:
            orientation: "horizontal"
            CustomButton:
                text: "<"
                font_size: 22
                pos_hint: {'center_y': .5}
                on_release: root.previous_model()
            Image:
                id: img
                source: './##graphviz-output##.png'
            CustomButton:
                text: ">"
                font_size: 22
                pos_hint: {'center_y': .5}
                on_release: root.next_model()

        Button:
            text: "Close"
            size_hint: None, None
            size: self.texture_size[0] + 30, 30
            pos_hint: {'right': 1}
            on_release: root.cancel()

<ErrorDialog>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"

        BoxLayout:
            orientation: "vertical"
            Label:
                id: label
                text: 'Unexpected error'

            Button:
                text: "Close"
                size_hint: None, None
                pos_hint: {'right': 1}
                size: self.texture_size[0] + 30, 30
                on_release: root.cancel()

<AboutDialog>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"

        BoxLayout:
            orientation: "vertical"
            Label:
                id: title
                bold: True
                font_size: 24
                shorten: True
                text_size: self.size
                halign: 'center'
                valign: 'middle'
            Label:
                id: version
                font_size: 18
                size_hint_y: 0.5
                shorten: True
                text_size: self.size
                halign: 'center'
                valign: 'middle'
            Label:
                id: copyright
                font_size: 14
                size_hint_y: 0.2
                shorten: True
                text_size: self.size
                halign: 'center'
                valign: 'middle'
            Label:
                id: license
                font_size: 14
                size_hint_y: 0.2
                shorten: True
                text_size: self.size
                halign: 'center'
                valign: 'middle'

        Button:
            text: "Close"
            size_hint: None, None
            pos_hint: {'right': 1}
            size: self.texture_size[0] + 30, 30
            on_release: root.cancel()

<MenuItem>:
    background_color: self.background_color_normal
    canvas.before:
        Color:
            rgba: self.background_color
        Rectangle:
            pos: self.pos
            size: self.size
    canvas.after:
        Color:
            rgba: self.separator_color
        Line:
            rectangle: self.x, self.y, self.width, self.height

<CustomButton>:
    background_normal: ""
    background_down: ""
    size_hint: None, None
    size: self.texture_size[0] + 30, self.texture_size[1] + 20
    background_color_normal: .3, .3, .3, 1
    background_color_down: .5, .5, .5, 1
    separator_color: self.background_color
    background_color: self.background_color_down if self.state=='down' else self.background_color_normal

<MenuButton>:
    size_hint_x: None if not root.inside_group else 1
    width: self.texture_size[0] + 64
    text_size: (self.width-62, self.height-12)
    halign: 'left'
    Image:
        allow_stretch: True
        opacity: 1 if root.icon else 0
        source: root.icon
        pos: root.x + 4, root.y + 4
        size: root.width - 8, root.height - 8

<MenuSubmenu>:
    size_hint_x: None
    width: self.texture_size[0] + 64

<MenuButton,MenuSubmenu>:
    background_normal: ""
    background_down: ""
    background_color: self.background_color_down if self.state=='down' else self.background_color_normal
    color: self.text_color_hovered if self.hovered else self.text_color_unhovered

<MenuDropDown>:
    auto_width: False
    width: 190

<MenuLabel>:
    size_hint_x: None
    width: self.texture_size[0] + 10
    color: self.text_color_unhovered

<MenuEmptySpace>:
    size_hint_x: 1

<MenuBar>:
    size_hint_y: None
    height: 48
    canvas.before:
        Color:
            rgba: self.background_color
        Rectangle:
            pos: self.pos
            size: self.size
    canvas.after:
        Color:
            rgba: self.separator_color
        Line:
            rectangle: self.x, self.y, self.width, self.height

<AtomSelectionButton>:
    size_hint_y: None
    height: 30
    group: 'name_list'

<AtomNameInput>:

    hint_text: 'Enter new name'
    size_hint: 1, None
    size: 70, 30
    multiline: False
    #on_focus(instance, value):
    #    if value: root._keyboard_release()
    # on_text_validate:
    #     name_list.add_widget(root.new_atom_name(self.text))
    #     self.text = ''
    #     root._keyboard_catch()

<AtomEditor>:

    orientation: 'vertical'
    size_hint_y: None
    height: 120

    HookCheckBox:
        id: hook_top
        on_release: root.update_atom()
    BoxLayout:
        orientation: 'horizontal'
        HookCheckBox:
            id: hook_left
            on_release: root.update_atom()
        ScrollView:
            do_scroll_x: True
            do_scroll_y: False
            effect_cls: 'ScrollEffect'
            scroll_type: ['bars']
            size_hint: 1, 1
            bar_width: 5
            bar_color: .30, .74, .85, .9
            Label:
                id: hook_label
                text: 'atom'
                size_hint_x: None if self.texture_size[0] > self.parent.width else 1
                width: self.texture_size[0]
        HookCheckBox:
            id: hook_right
            on_release: root.update_atom()
    HookCheckBox:
        id: hook_bottom
        on_release: root.update_atom()

    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: None
        height: 50
        Label:
            text: 'Is Constant'
            text_size: (self.width, self.height)
            halign: 'center'
            size_hint: .5, None
            size: 100, 20
        CheckBox:
            id: constant_checkbox
            on_release: root.update_atom()
            size_hint: None, None
            size: 30, 20

<HookCheckBox@CheckBox>:
    background_checkbox_down: 'atlas://data/images/defaulttheme/checkbox_radio_on'
    background_checkbox_normal: 'atlas://data/images/defaulttheme/checkbox_radio_off'
    background_checkbox_disabled_down: 'atlas://data/images/defaulttheme/checkbox_radio_disabled_on'
    background_checkbox_disabled_normal: 'atlas://data/images/defaulttheme/checkbox_radio_disabled_off'


################################################################################

# Main window layout

################################################################################

GlobalContainer:
    orientation: 'vertical'

    MenuBar:
        id: menu
        height: 30

        MenuSubmenu:
            text: "File"
            MenuButton:
                text: "New"
                on_release: root.new_graph()
            MenuButton:
                text: "Open"
                on_release: root.show_load()
            MenuButton:
                text: "Save"
                on_release: root.show_save()
            MenuButton:
                text: "Close"
                on_release: root.close_graph()
            MenuButton:
                text: "Import ASP (NI)"
                #on_release: root.import_asp()
            MenuButton:
                text: "Export..."
                on_release: root.show_export()
            MenuButton:
                text: "Quit"
                on_release: app.stop()

        MenuSubmenu:
            text: "Edit"
            MenuButton:
                text: "Undo  (NI)"
                #on_release: app.button(31)
            MenuButton:
                text: "Redo  (NI)"
                #on_release: app.button(31)
            MenuButton:
                text: "Atom"
                on_release: root.set_item('atom')
            MenuButton:
                text: "Ellipse"
                on_release: root.set_item('ellipse')
            MenuButton:
                text: "Rectangle"
                on_release: root.set_item('rectangle')
            MenuButton:
                text: "Insert/Delete"
                on_release: root.set_mode('insert')
            MenuButton:
                text: "Sel/Res/Mov"
                on_release: root.set_mode('select')
            MenuButton:
                text: "Duplicate  (NI)"
                #on_release: app.button(31)

        MenuSubmenu:
            text: "View"
            MenuButton:
                text: "Zoom"
                #on_release: app.button(31)
            MenuButton:
                text: "Pan"
                #on_release: app.button(31)
            MenuButton:
                text: "Reset View (NI)"
                #on_release: root.reset_view()
            MenuButton:
                text: "Highlight Variables"
                on_release: root.highlight_variables()
            MenuButton:
                text: "Symbolic Formula"
                on_release: root.view_symbolic_formula()
            MenuButton:
                text: "Toggle side panel"
                on_release: root.toggle_sidepanel()
            MenuButton:
                text: "Settings (NI)"
                #on_release: root.toggle_sidepanel()

        MenuSubmenu:
            text: "Solver"
            MenuButton:
                text: "Find stable models"
                on_release: root.show_gringo_query()

        MenuSubmenu:
            text: "Help"
            MenuButton:
                text: "Quick tutorial"
                on_release: root.begin_tutorial()
            MenuButton:
                text: "More on ExGraphs... (NI)"
                #on_release: app.button(31)
            MenuButton:
                text: "More on ASP... (NI)"
                #on_release: app.button(31)
            MenuButton:
                text: "More on EqGraphs... (NI)"
                #on_release: app.button(31)
            MenuButton:
                text: "Shortcuts (NI)"
                #on_release: app.button(31)
            MenuButton:
                text: "About"
                on_release: root.show_about()

        MenuEmptySpace:

        MenuLabel:
            separator_color: self.background_color
            text:
                'x: {0}  y: {1}, {2}, {3}'.format(window.Window.mouse_pos[0],
                window.Window.mouse_pos[1], root.modestr, root.itemstr)

    BoxLayout:
        orientation: 'horizontal'

        StencilView:
            id: stencilview
            size_hint: 1, 1
            RootWidget:

        BoxLayout:
            id: sidepanel
            orientation: 'vertical'
            padding: 10, 10, 10, 10
            spacing: 10
            size_hint_x: None
            width: root.width * .15
            canvas.before:
                Color:
                    rgba: menu.background_color
                Rectangle:
                    pos: self.pos
                    size: self.size

            Label:
                text: 'Select name'
                text_size: (self.width, self.height)
                halign: 'center'
                size_hint: 1, None
                #size_hint_min_x: 0
                height: 30

            AtomNameInput:
                id: atom_input
                # Python code need references to objects which it interacts with
                root: root
                name_list: name_list

            ScrollView:
                size_hint: 1, 1
                bar_width: 5
                scroll_y: 1
                scroll_type: ['bars', 'content']
                GridLayout:
                    id: name_list
                    update_atom_editor: root.update_atom_editor
                    set_item: root.set_item
                    cols: 1
                    spacing: 0
                    size_hint_y: None
                    height: self.minimum_height

            BoxLayout:
                orientation: 'horizontal'
                size_hint_x: None
                width: root.width * .15 - sidepanel.padding[0]*2
                Button:
                    text: 'Delete'
                    on_release: root.delete_atom()
                    size_hint: 1, None
                    height: 30
                Button:
                    text: 'Rename'
                    on_release: root.show_rename_atom()
                    size_hint: 1, None
                    height: 30

            Label:
                text: 'Properties'
                text_size: (self.width, self.height)
                halign: 'center'
                size_hint: 1, None
                #size_hint_min_x: 0
                height: 30

            AtomEditor:
                id: atom_editor
                disabled: True
                root: root

            MenuEmptySpace:
                size_hint_y: 1
